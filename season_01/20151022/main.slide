Go in Action 輪読会 #01
20:00 22 Oct 2015

Takuma Morikawa
https://github.com/evalphobia
https://github.com/go-reading-jp/goinaction

* はじめに

みんなでGo in Actionを読み進めていく会です

週一くらいで集まって、
読んで書いて、Go言語の理解を深めていきましょう。


* 進め方

3,4人程度のグループに分かれて、
毎回、1つのグループが担当して進めていく予定です。

1回の範囲はだいたい、10ページ 〜 1章分くらいと考えています。
担当した章が終わらなかった場合、
残りの範囲は次回に違うグループが担当します。

* 輪読会の時間配分（仮）

・発表 15〜40分
・質疑応答 5〜10分
・ディスカッション＆課題 20分〜30分

* （自己紹介の時間）

テンプレ

・お名前

・趣味とか好きな異性のタイプとか好きなお酒とか

・会社とか担当してる仕事とか

・使用言語とか

・Goの経験とか


* #01 Introducing Go

* 1. イントロダクションGo

最近のコンピュータープログラムは...

- マルチコアCPUで動くのが当たり前
- チームで開発するの当たり前


この章ではGoと他の言語との違いを見ていきます

* 1.1 モダンのプログラミングの問題の解決

*一般のプログラミング言語*

=> 実行速度 vs 開発速度

- 実行速度: C, C++
- 開発速度: Python, Ruby

* 1.1 モダンのプログラミングの問題の解決

*Go言語*

=> 高速な実行と開発の両立

- 平易なシンタックス
- 高速なコンパイラ
- 並列処理のサポート
- シンプルな型
- GC

* 1.1.1 開発速度

- コンパイルがはやい
=> 直接importしているものしか必要としないため

- 型安全

* 1.1.2 並列処理

*ゴルーチン*

- 他のゴルーチンと並列して動作する関数
- エントリーポイントの関数もゴルーチン
- 他の言語ではスレッドを使うが、Goでは1スレッド上で多数のゴルーチンを実行する
- スレッドよりもメモリ効率が良い

* 1.1.2 並列処理

*ゴルーチン*

- `go` というキーワードを関数の前につけるだけで使える

.code 1.1.2_goroutine.go

* 1.1.2 並列処理

*チャネル*

- ゴルーチン間で安全なデータのやりとりができるデータ構造
- 並列処理が難しいのは、意図せずして共有データに変更を加えてしまうこと
=> ロック機構が必要になる

- チャネルはロックや同期機構無しで安全なデータ送受信ができる
- ポインタのデータは共有されたまま

* 1.1.3 Go言語の型

*柔軟な非階層的構造の型システム*
=> コードの再利用が容易

*OOP可能*
=> 継承の代わりにコンポジション（埋め込み）

*インターフェースは自動で使える*
=> 宣言の必要なし

* 1.1.3 Go言語の型

*シンプルな型*

- 組み込み型: `int`, `string` etc...
- ユーザー定義型: C言語の構造体に近いが、メソッドも定義可能

◯ 小さな型を複数埋め込み
× 多重継承


* 1.1.3 Go言語の型

*インターフェース*

- 小さな振る舞いを作る
- インターフェース型で振る舞いを定義して、型に実装を書くだけでOK
- ダックタイピング

* 1.1.3 Go言語の型

- Java: 明示的に宣言する

.code 1.1.3_interface_java.java 

- Go: メソッドを満たせば使用可能

.code 1.1.3_interface_go.go


* 1.1.3 Go言語の型

*インターフェース*

.link https://golang.org/pkg/io/#Reader io.Reader


- ファイル、バッファ、ソケット etc. から読み出す処理を一つのインターフェースで統一すると、柔軟できれいな実装が可能になる



* 1.1.4 メモリ管理

*GC*

- メモリの割り当て・解放を意識しなくてOK

* 1.2 Hello, Go

*ハローワールドしてみる*

.code 1.2_hello_world.go


* 1.2.2 Goプレイグラウンド

ブラウザ上でGo言語が実行できる！

.link http://play.golang.org


* 1.3 サマリーとベストプラクティス

*Go言語*

- モダンかつ高速で、強力な標準ライブラリを持った言語
- 標準の機能として並列処理が使える言語
- インターフェースを使うことで、コードの再利用がし易い言語
